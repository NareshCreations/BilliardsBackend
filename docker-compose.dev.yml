version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: billiards_postgres_dev
    environment:
      POSTGRES_DB: billiards_platform
      POSTGRES_USER: billiards_user
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U billiards_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: billiards_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Your Node.js App (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: billiards_app_dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=billiards_platform
      - DB_USER=billiards_user
      - DB_PASSWORD=password123
      - JWT_SECRET=dev-jwt-secret-key
      - DATABASE_URL=postgresql://billiards_user:password123@postgres:5432/billiards_platform
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./dist:/app/dist

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: billiards_nginx_dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
